---
- name: preflight | Assert usage of systemd as an init system
  ansible.builtin.assert:
    that: ansible_service_mgr == 'systemd'
    msg: "This role only works with systemd"

- name: preflight | Install package fact dependencies
  become: true
  ansible.builtin.package:
    name: "{{ _pkg_fact_req }}"
    state: present
  when: (_pkg_fact_req)
  vars:
    _pkg_fact_req: "{% if (ansible_pkg_mgr == 'apt') %}\
      {{ ('python-apt' if ansible_python_version is version('3', '<') else 'python3-apt') }}
      {% else %}\
      {% endif %}"

- name: preflight | Gather package facts
  ansible.builtin.package_facts:
  when: "not 'packages' in ansible_facts"

- name: preflight | Ensure the system has the necessary dependencies to extract release archives
  ansible.builtin.apt:
    name: "{{ __pkg__ }}"
    state: present
    update_cache: true
  loop: "{{ _deps }}"
  loop_control:
    loop_var: __pkg__

- name: preflight | Retrieve correct checksums for secure Go Lego release archive downloads
  block:
    - name: preflight | Retrieve the checksum list from GitHub releases page
      ansible.builtin.set_fact:
        __raw_checksums: "{{ lookup('url', _lego_repo_download + '/v' \
          + lego_version + '/lego_' + lego_version + '_checksums.txt', wantlist=True) | list }}"
      run_once: true

    - name: "preflight | Get the correct checksum for architecture: {{ _go_arch }}"
      ansible.builtin.set_fact:
        __lego_checksum: "{{ __checksum__.split(' ')[0] }}"
      loop: "{{ __raw_checksums }}"
      loop_control:
        loop_var: __checksum__
      when:
        - "('lego_' + lego_version + '_linux_' + go_arch + '.tar.gz') in __checksum__"
